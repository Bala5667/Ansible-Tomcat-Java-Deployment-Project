1. Preparing the Environment
Transferred Key File:
I securely transferred the AmazonLinux.pem (SSH private key) 
to my master EC2 instance using WinSCP for authentication and secure access to the worker EC2 instance.

Permission Configuration:
I ensured the correct permissions for the PEM file using:

chmod 400 ~/worker-AmazonLinux.pem

SSH Verification:
Before proceeding, I validated SSH connectivity from the master to the worker machine:

ssh -i ~/worker-AmazonLinux.pem ec2-user@172.31.25.47

2. Ansible Inventory Setup

I created an Ansible inventory file named inventory.ini to define the managed node:

nano inventory.ini

Added the following configuration:

[webservers]
worker1 ansible_host=172.31.90.235 ansible_user=ec2-user ansible_ssh_private_key_file=~/AmazonLinux.pem

3. Creating the Ansible Playbook

I created a YAML playbook to automate NGINX installation:

nano install_nginx.yml
Script:

---
- name: Install NGINX on worker machine (Amazon Linux)
  hosts: webservers
  become: yes
  tasks:

    - name: Update the system packages
      yum:
        name: "*"
        state: latest

    - name: Install NGINX
      yum:
        name: nginx
        state: present

    - name: Start NGINX service
      service:
        name: nginx
        state: started
        enabled: yes

    - name: Ensure NGINX is running
      shell: systemctl status nginx
      register: nginx_status

    - name: Show NGINX status
      debug:
        var: nginx_status.stdout_lines


The playbook included tasks to:

Update the package cache

1. Install NGINX

2. Start and enable the NGINX service

I executed the playbook using:

ansible-playbook -i inventory.ini install_nginx.yml

4. Verification

Once the playbook ran successfully, I SSHed into the worker EC2 instance and checked the NGINX service status:

sudo systemctl status nginx

Verified the service was active and running, confirming successful deployment.

Project Outcome:

This project demonstrates a complete Ansible automation cycle using a master-worker model. 
It showcases how infrastructure can be configured remotely and securely through code. 
By automating repetitive tasks like installing and configuring software, it significantly improves efficiency and reduces human error.

