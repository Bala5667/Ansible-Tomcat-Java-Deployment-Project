Objective:
Automate the setup of Java and Apache Tomcat on an EC2 instance and deploy a .war file using Ansible. I completed this project using both flat playbooks and a role-based structure to follow best practices and modularize the automation.

üõ†Ô∏è Step 1: Environment Setup
I launched an Amazon Linux 2 EC2 instance from the AWS console.

I made sure to open port 8080 in the security group so Tomcat could be accessed from a browser.

I connected to the instance via SSH:

ssh -i my-key.pem ec2-user@<EC2-PUBLIC-IP>
Then, I installed Ansible:

sudo amazon-linux-extras install ansible2 -y
üìÇ Step 2: Project Folder Setup
I created a folder named ansible-java-tomcat-deploy to organize all my playbooks:

mkdir ansible-java-tomcat-deploy
cd ansible-java-tomcat-deploy
üìù Step 3: Ansible Flat Playbooks
üîπ install_java.yml
This playbook installs OpenJDK 11:

- name: Install Java
  hosts: localhost
  become: yes
  tasks:
    - name: Install OpenJDK 11
      yum:
        name: java-11-openjdk
        state: present
üîπ install_tomcat.yml
This playbook sets up Apache Tomcat 9:

- name: Install Apache Tomcat
  hosts: localhost
  become: yes
  tasks:
    - name: Create Tomcat user
      user:
        name: tomcat
        shell: /bin/false
        system: yes

    - name: Download Tomcat
      get_url:
        url: https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.85/bin/apache-tomcat-9.0.85.tar.gz
        dest: /tmp/apache-tomcat.tar.gz

    - name: Create Tomcat directory
      file:
        path: /opt/tomcat
        state: directory
        owner: tomcat
        group: tomcat
        mode: '0755'

    - name: Extract Tomcat
      unarchive:
        src: /tmp/apache-tomcat.tar.gz
        dest: /opt/tomcat
        remote_src: yes
        extra_opts: ["--strip-components=1"]

    - name: Create Tomcat systemd service
      copy:
        dest: /etc/systemd/system/tomcat.service
        content: |
          [Unit]
          Description=Apache Tomcat Web Application Container
          After=network.target

          [Service]
          Type=forking
          User=tomcat
          Group=tomcat
          Environment="JAVA_HOME=/usr/lib/jvm/jre"
          Environment="CATALINA_HOME=/opt/tomcat"
          Environment="CATALINA_BASE=/opt/tomcat"
          ExecStart=/opt/tomcat/bin/startup.sh
          ExecStop=/opt/tomcat/bin/shutdown.sh
          Restart=on-failure

          [Install]
          WantedBy=multi-user.target

    - name: Enable and start Tomcat
      systemd:
        name: tomcat
        enabled: yes
        state: started
üîπ deploy_java.yml
This playbook deploys a Java .war file to Tomcat:

- name: Deploy Java WAR file to Tomcat
  hosts: localhost
  become: yes
  tasks:
    - name: Copy WAR file to webapps directory
      copy:
        src: app.war
        dest: /opt/tomcat/webapps/app.war
        owner: tomcat
        group: tomcat
        mode: '0644'

    - name: Restart Tomcat to deploy the WAR
      systemd:
        name: tomcat
        state: restarted

I placed the app.war file in the same folder (ansible-java-tomcat-deploy/) before running the playbook.

‚ñ∂Ô∏è Step 4: Running the Playbooks
I ran each playbook one by one:

ansible-playbook install_java.yml --connection=local
ansible-playbook install_tomcat.yml --connection=local
ansible-playbook deploy_java.yml --connection=local
üåê Step 5: Testing the Application
I opened the app in the browser using:

http://<EC2_PUBLIC_IP>:8080/app
The application deployed successfully, and I was able to see the contents of the sample .war file.

